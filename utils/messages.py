from telegram import Update
from telegram.ext import ContextTypes
import re
from config import ADMIN_ID
from utils.logging_config import logger


async def send_message_to_self(application, message: str) -> None:
    """–ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    await application.bot.send_message(chat_id=ADMIN_ID, text=message)
    logger.info("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!")


async def reply_to_student(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ñ–¥–ø–æ–≤—ñ–¥–∞—î —É—á–Ω—é, —è–∫—â–æ –≤—á–∏—Ç–µ–ª—å –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ –π–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ –∑ –±–æ—Ç–æ–º."""
    if not update.message.reply_to_message:
        await update.message.reply_text("‚ö†Ô∏è –í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –±–æ—Ç –ø–µ—Ä–µ—Å–ª–∞–≤ –≤—ñ–¥ —É—á–Ω—è.")
        return

    original_message = update.message.reply_to_message
    student_id = extract_user_id_from_message(original_message.caption or original_message.text)

    if not student_id:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ ID —É—á–Ω—è.")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è
    original_text = original_message.caption or original_message.text or "üì© (–ú–µ–¥—ñ–∞—Ñ–∞–π–ª)"
    original_text = extract_user_question(original_text)

    response_text = f"üì¢ *–í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è:*\n_{original_text}_\n\nüì© *–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—á–∏—Ç–µ–ª—è:*"

    # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º —Ñ–æ—Ä–º–∞—Ç–æ–º
    if update.message.sticker:
        await context.bot.send_message(chat_id=student_id, text=response_text, parse_mode="Markdown")
        await context.bot.send_sticker(chat_id=student_id, sticker=update.message.sticker.file_id)

    elif update.message.photo:
        await context.bot.send_photo(chat_id=student_id, photo=update.message.photo[-1].file_id, caption=response_text,
                                     parse_mode="Markdown")

    elif update.message.video:
        await context.bot.send_video(chat_id=student_id, video=update.message.video.file_id, caption=response_text,
                                     parse_mode="Markdown")

    elif update.message.voice:
        await context.bot.send_message(chat_id=student_id, text=response_text, parse_mode="Markdown")
        await context.bot.send_voice(chat_id=student_id, voice=update.message.voice.file_id)

    elif update.message.document:
        await context.bot.send_document(chat_id=student_id, document=update.message.document.file_id,
                                        caption=response_text, parse_mode="Markdown")

    elif update.message.text:
        await context.bot.send_message(chat_id=student_id, text=f"{response_text}\n\n_{update.message.text}_",
                                       parse_mode="Markdown")

    await update.message.reply_text("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ —É—á–Ω–µ–≤—ñ!")


def extract_user_id_from_message(text):
    """–í–∏—Ç—è–≥—É—î ID —É—á–Ω—è –∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ–≥–æ –±–æ—Ç–æ–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    match = re.search(r'tg://user\?id=(\d+)', text)
    return match.group(1) if match else None


def extract_user_question(message_text):
    match = re.search(r"\n\n(.+)", message_text, re.DOTALL)
    if match:
        return match.group(1).strip()
