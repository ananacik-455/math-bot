from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from utils.storage import phrases, save_user_data, load_user_data
from utils.logging_config import logger
from handlers.menu import show_main_menu
from handlers.book_lesson import book_start
from utils.messages import send_message_to_self
from handlers.tests import check_text_answer
from config import QUESTIONS


# === –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –Ω–∞ —É—Ä–æ–∫ ===
async def register_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—É—Å–∫–∞—î –ø—Ä–æ—Ü–µ—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–∞ –ø—Ä–æ–±–Ω–µ –∑–∞–Ω—è—Ç—Ç—è."""
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥–∂–µ—Ä–µ–ª–æ –≤–∏–∫–ª–∏–∫—É (–∫–æ–º–∞–Ω–¥–∞ –∞–±–æ –∫–Ω–æ–ø–∫–∞)
    # user_id, username, message_context = None, "–ë–µ–∑ –Ω—ñ–∫–Ω–µ–π–º—É", None
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)
    message_context = query.message
    # if update.callback_query:
    #     query = update.callback_query
    #     user_id = str(query.from_user.id)
    #     message_context = query.message
    #     await query.answer()
    # elif update.message:
    #     message = update.message
    #     user_id = str(message.from_user.id)
    #     message_context = message

    if not user_id or not message_context:
        return  # –í–∏—Ö—ñ–¥, —è–∫—â–æ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

    data = load_user_data(user_id)
    context.user_data["user_id"] = user_id
    if data["answers"]:
        # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ –∑–∞–ø–æ–≤–Ω—é–≤–∞–≤ –∞–Ω–∫–µ—Ç—É
        answers = data["answers"]
        answers_text = "\n".join([f"{QUESTIONS[i]['question']} {answers[i]}" for i in range(len(answers))])

        keyboard = [
            [InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ –∑–Ω–æ–≤—É", callback_data="retry_survey")],
            [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∑–∞–ø–∏—Å—É –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è", callback_data="skip_survey")],
            [InlineKeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        text = phrases["booking"]["filled_survey"]
        text = text.replace("answers_text", answers_text)
        await query.edit_message_text(
            text,
            reply_markup=reply_markup
        )
    else:
        # –Ø–∫—â–æ –∞–Ω–∫–µ—Ç–∏ –Ω–µ–º–∞—î, –ø–æ—á–∏–Ω–∞—î–º–æ —ó—ó –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è
        await start_survey(update, context)


async def start_survey(update: Update, context: ContextTypes.DEFAULT_TYPE, first_message=True) -> None:
    """–†–æ–∑–ø–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –∞–Ω–∫–µ—Ç—É–≤–∞–Ω–Ω—è."""
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —Ç–∞ —Å—Ç–∏—Ä–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    user_id = context.user_data["user_id"]
    user_progress = load_user_data(user_id)
    user_progress["answers"] = []

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ context
    context.user_data["user_progress"] = user_progress
    if first_message:
        await context.bot.send_message(
            chat_id=user_id,
            text=phrases["booking"]["before_survey"]
        )
    await ask_question(update, context)


async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–¥–∞—î –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ."""
    # –ó—á–∏—Ç—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    user_id = context.user_data["user_id"]
    progress = context.user_data["user_progress"]
    if progress and len(progress["answers"]) < len(QUESTIONS):
        question_data = QUESTIONS[len(progress["answers"])]
        context.user_data["user_progress"]["expected_type"] = question_data["type"]

        await context.bot.send_message(chat_id=user_id, text=question_data["question"])
    else:
        # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏ —á–µ—Ä–µ–∑ –∑–º—ñ–Ω–∏ —Ç–∏–ø—É –Ω–∞ –ù–∞–ù
        progress["expected_type"] = None
        context.user_data["user_id"] = user_id
        await save_user_data(user_id, progress)
        await context.bot.send_message(chat_id=user_id, text=phrases["booking"]["after_survey"])
        await book_start(update, context)


async def handle_unknown(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–ª—è—î –±—É–¥—å-—è–∫—ñ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∞–ª–µ –∑–±–µ—Ä—ñ–≥–∞—î –ª–∏—à–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∞–Ω–∫–µ—Ç—É."""

    try:
        user_progress = context.user_data["user_progress"]
    except KeyError:
        print(f"Random text from {update.message.from_user.username}")
        return

    if user_progress == "QA":
        user = update.message.from_user
        message_text = update.message.text
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_link = f"[ {user.full_name} ]( tg://user?id={user.id} ) ( @{user.username} )"

        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤—á–∏—Ç–µ–ª—è
        teacher_message = f"üì© *–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {user_link}:*\n\n{message_text}"
        await send_message_to_self(context.application, teacher_message)
        del context.user_data["user_progress"]
        return
    elif user_progress == "test":
        # –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è
        message_text = update.message.text
        context.user_data["user_answer"] = message_text
        del context.user_data["user_progress"]
        await check_text_answer(update, context)
        return

    user_id = context.user_data["user_id"]
    text = update.message.text.strip()

    if user_progress.get("expected_type"):
        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∞–Ω–∫–µ—Ç—É, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        expected_type = user_progress["expected_type"]

        if expected_type == "number" and not text.isdigit():
            await context.bot.send_message(chat_id=user_id, text="–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.")
            return

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        context.user_data["user_progress"]["answers"].append(text)

        # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è
        await ask_question(update, context)
    else:
        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∞–Ω–∫–µ—Ç—É, –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ
        logger.warning(f"–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–≤—ñ–¥–æ–º—É –∫–æ–º–∞–Ω–¥—É –≤—ñ–¥ {update.effective_user.username}: {update.message.text}")
        await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —è –Ω–µ —Ä–æ–∑—É–º—ñ—é —Ü—é –∫–æ–º–∞–Ω–¥—É. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.")
        await context.bot.send_message(chat_id=user_id, text="–Ø –ø–æ–∫–∏ –Ω–µ –∑–Ω–∞—é, —â–æ –∑ —Ü–∏–º —Ä–æ–±–∏—Ç–∏ üòÖ")
        await show_main_menu(update, context)


async def handle_survey_decision(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–ª—è—î —Ä—ñ—à–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —â–æ–¥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏."""
    query = update.callback_query

    if query.data == "retry_survey":
        await query.message.reply_text(phrases["booking"]["again_survey"])
        await start_survey(update, context, first_message=False)
    elif query.data == "skip_survey":
        await book_start(update, context)
        return
