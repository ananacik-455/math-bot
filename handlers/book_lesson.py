from telegram import InlineKeyboardButton, InlineKeyboardMarkup

from google_calendar import get_next_7_days, get_available_times
from utils.storage import load_user_data, save_user_data
from datetime import datetime, timedelta
import pytz
from google_calendar import create_event_from_calendar, delete_event_from_calendar
from handlers.others import delete_reminder, create_reminder
from handlers.menu import show_main_menu


# === –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —É—Ä–æ–∫—É ===
async def ask_for_day(update, context):
    """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –≤—ñ–ª—å–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤ —Ç–∞ –ø—Ä–æ–ø–æ–Ω—É—î —ó—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ."""
    days = get_next_7_days()
    keyboard = [[InlineKeyboardButton(day, callback_data=f"day_{idx}")] for idx, day in enumerate(days)]
    keyboard.extend([[InlineKeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data=f"menu")]])
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –∑—Ä—É—á–Ω–∏–π –¥–µ–Ω—å –¥–ª—è –∑–∞–Ω—è—Ç—Ç—è:", reply_markup=reply_markup)
    else:
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∑—Ä—É—á–Ω–∏–π –¥–µ–Ω—å –¥–ª—è –∑–∞–Ω—è—Ç—Ç—è:", reply_markup=reply_markup)


async def ask_for_time(update, context):
    """–ü—Ä–æ–ø–æ–Ω—É—î –≤–∏–±—ñ—Ä –≤—ñ–ª—å–Ω–æ–≥–æ —á–∞—Å—É —É –≤–∏–±—Ä–∞–Ω–∏–π –¥–µ–Ω—å."""
    query = update.callback_query
    await query.answer()

    selected_day_idx = int(query.data.split("_")[1])
    selected_date = datetime.now(pytz.utc) + timedelta(days=selected_day_idx + 1)
    selected_date = selected_date.date()  # –ë–µ—Ä–µ–º–æ –ª–∏—à–µ –¥–∞—Ç—É –±–µ–∑ —á–∞—Å—É
    context.user_data["selected_date"] = selected_date  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞—Ç—É —É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ

    available_times = get_available_times(selected_date)

    keyboard = [[InlineKeyboardButton(time, callback_data=f"time_{time}")] for time in available_times]
    keyboard.extend([[InlineKeyboardButton("–û–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π –¥–µ–Ω—å", callback_data=f"ask_for_day")]])
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.callback_query:
        await update.callback_query.edit_message_text(f"–í–∏ –æ–±—Ä–∞–ª–∏ {get_next_7_days()[selected_day_idx]}.\n–û–±–µ—Ä—ñ—Ç—å —á–∞—Å:",
                                                      reply_markup=reply_markup)
    else:
        await update.message.reply_text(f"–í–∏ –æ–±—Ä–∞–ª–∏ {get_next_7_days()[selected_day_idx]}.\n–û–±–µ—Ä—ñ—Ç—å —á–∞—Å:",
                                        reply_markup=reply_markup)


async def book_start(update, context):
    """–ë—Ä–æ–Ω—é—î –≤–∏–±—Ä–∞–Ω–∏–π —á–∞—Å —É Google –ö–∞–ª–µ–Ω–¥–∞—Ä—ñ."""

    user_id = str(context.user_data["user_id"])
    students_data = load_user_data(user_id)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞–ø–∏—Å–∞–Ω–∏–π
    if students_data["lesson"]:

        booked_lesson = students_data["lesson"]
        keyboard = [
            [InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —ñ–Ω—à–∏–π —á–∞—Å", callback_data="change_lesson")],
            [InlineKeyboardButton("–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è", callback_data="cancel_lesson")],
            [InlineKeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        text = f"–í–∏ –≤–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ñ –Ω–∞ {booked_lesson['date']} –æ {booked_lesson['time']} üóì\n\n" \
               f"–í–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –∞–±–æ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å:"

        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)
        return
    await ask_for_day(update, context)
    return


async def book_time(update, context):
    """–ó–∞–ø–∏—Å—É—î–º–æ –Ω–∞ –æ–±—Ä–∞–Ω–∏–π —á–∞—Å"""
    query = update.callback_query
    await query.answer()

    user_id = str(query.from_user.id)
    students_data = load_user_data(user_id)

    selected_time = query.data.split("_")[1].split(" ")[0]
    selected_date = context.user_data.get("selected_date")
    username = query.from_user.username or "–ë–µ–∑ –Ω—ñ–∫–Ω–µ–π–º—É"

    # –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —é–∑–µ—Ä—É
    await create_reminder(
        update,
        context,
        selected_date=selected_date,
        selected_time=selected_time,
        user_id=user_id,
        job_name=f"reminder_{user_id}_{selected_time}"
    )

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–≤–µ–Ω—Ç—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—ñ
    # TODO: –¥–æ–¥–∞—Ç–∏ –ø–æ—à—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –≤—ñ–Ω —ó—ó –≤–≤—ñ–≤.
    # TODO: –ü—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≤—Å—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–Ω–æ–≤—É (–ú–æ–∂–ª–∏–≤–æ —Ç—Ä–µ–±–∞ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é)
    event_id = create_event_from_calendar(selected_time, selected_date, username)

    # –î–æ–¥–∞—î–º–æ username –¥–æ —É—á–Ω—è
    if not students_data["username"]:
        students_data["username"] = username

    # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—Ä–æ–±–Ω–µ –∑–∞–Ω—è—Ç—Ç—è
    students_data["lesson"] = {
        "date": str(selected_date),
        "time": selected_time,
        "event_id": event_id,  # –î–æ–¥–∞—î–º–æ ID –ø–æ–¥—ñ—ó
    }
    await save_user_data(user_id, students_data)

    if update.callback_query:
        await update.callback_query.edit_message_text(
            f"–ì–æ—Ç–æ–≤–æ! –í–∏ –∑–∞–ø–∏—Å–∞–Ω—ñ –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è {selected_date} –æ {selected_time} üóì")
    else:
        await update.message.reply_text(f"–ì–æ—Ç–æ–≤–æ! –í–∏ –∑–∞–ø–∏—Å–∞–Ω—ñ –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è {selected_date} –æ {selected_time} üóì")
    await show_main_menu(update, context, new=True)
    return


async def change_lesson(update, context):
    """–ü–µ—Ä–µ–∑–∞–ø–∏—Å—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –Ω–æ–≤–∏–π —á–∞—Å, —Å–ø–æ—á–∞—Ç–∫—É –≤–∏–¥–∞–ª—è—é—á–∏ —Å—Ç–∞—Ä–µ –∑–∞–Ω—è—Ç—Ç—è."""
    query = update.callback_query
    await query.answer()

    await cancel_lesson(update, context)
    await ask_for_day(update, context)


async def cancel_lesson(update, context):
    """–û–±—Ä–æ–±–ª—è—î —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å–∞–Ω–æ–≥–æ –∑–∞–Ω—è—Ç—Ç—è."""
    query = update.callback_query
    await query.answer()

    user_id = str(query.from_user.id)
    students_data = load_user_data(user_id)

    await delete_reminder(
        update,
        context,
        job_name=f"reminder_{user_id}_{students_data['lesson']['time']}")

    # –í–∏–¥–∞–ª—è—é –∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø–æ–¥—ñ—é
    delete_event_from_calendar(students_data["lesson"]["event_id"])

    # –í–∏–¥–∞–ª—è—é –∑–∞–ø–∏—Å –∑ –±–∞–∑–∏
    students_data["lesson"] = {}
    await save_user_data(user_id, students_data)

    await query.edit_message_text("–í–∞—à –∑–∞–ø–∏—Å –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ ‚ùå")
    await show_main_menu(update, context, new=True)
